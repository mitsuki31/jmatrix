# ======================= #
#         Makefile        #
# ======================= #
# >> Created by Ryuu Mitsuki

# WARNING! Don't change this version manually, it's autogenerated!
VERSION := 1.1.0
PREFIX  := [jmatrix]

CC := javac

# Define null variable, let user to initialize with any Java options or flags
FLAGS ?=

# Assign "true" into this variable would trigger the Java linter
# and the `FLAGS` variable automatically added linter flags "-Xlint"
LINT ?=

ifeq "$(LINT)" "true"
	FLAGS := -Xlint -Xdoclint
endif

ALL_RULES := all compile package clean cleanbin cleandocs

# Path variables
PYTHON_PATH    := ./src/main/python/
SOURCES_PATH   := ./src/main/java/
RESOURCES_PATH := ./src/main/resources/
OUTPUT_PATH    := ./target/
CLASSES_PATH   := ./target/classes/
PACKAGE_PATH   := com/mitsuki/jmatrix/
MANIFEST       := META-INF/MANIFEST.MF
DOCS_PATH      := docs/

SOURCES_LIST   := target/generated-list/sourceFiles.lst
CLASSES_LIST   := target/generated-list/outputFiles.lst

SRCFILES       := $(shell find $(SOURCES_PATH) -type f -name '*.java')
ifneq "$(wildcard $(CLASSES_PATH))" ""
	CLSFILES   := $(shell find $(CLASSES_PATH) -type f -name '*.class')
endif

jar      := $(OUTPUT_PATH)jmatrix-$(VERSION).jar
jar_name := $(word 3,$(subst /, , $(jar)))


# Check whether the program has been compiled
HAS_OUTPUT   := $(wildcard $(OUTPUT_PATH))
HAS_COMPILED := $(wildcard $(CLASSES_PATH))

ARG1 := $(word 1,$(MAKECMDGOALS))
ifeq ($(words $(MAKECMDGOALS)),2)
    ARG2 := $(word 2,$(MAKECMDGOALS))
endif


# Check VERBOSE variable from shell
ifndef VERBOSE
	MAKE_VERBOSE :=
else
ifeq ($(VERBOSE),true)
	MAKE_VERBOSE := true
else
	MAKE_VERBOSE :=
endif
endif


# Define null variable, user should defines it on CLI arguments
# if want to activate it (the value should "true")
INCLUDE-SRC ?=


ifeq "$(ARG1)" "clean"
ifeq "$(strip $(HAS_OUTPUT))" ""
$(error $(PREFIX) Program is uncompiled, failed to clean working directory)
endif
endif

ifeq "$(ARG1)" "cleanbin"
ifeq "$(strip $(HAS_COMPILED))" ""
$(error $(PREFIX) Program is uncompiled, failed to clean classes directory)
endif
endif


# Get the index of "build-docs" rule on command line args
ifeq "$(filter build-docs,$(MAKECMDGOALS))" "build-docs"
ifdef VERBOSE
	CMD = bash bin/get_argument.sh -v $(MAKECMDGOALS) -s build-docs
else
	CMD = bash bin/get_argument.sh $(MAKECMDGOALS) -s build-docs
endif

BUILD_DOCS_ARG := $(shell $(CMD))


# Check if the "build-docs"'s index is not at first argument,
# then it will returns error
ifneq "$(BUILD_DOCS_ARG)" "-1"
ifneq "$(words $(MAKECMDGOALS))" "1"
$(error $(PREFIX) 'build-docs' rule must be a standalone rule)
endif
endif

endif

# This to prevent all `Make`'s rules treated as file by default
.PHONY: $(ALL_RULES)


all:
	$(info [Makefile-jmatrix])
	$(if $(shell [ ! -f $(DOCS_PATH)makefile-usage.txt ] && echo 1),\
		$(error $(PREFIX) File "$(DOCS_PATH)makefile-usage.txt" is missing)\
	)
	@cat $(DOCS_PATH)makefile-usage.txt


check-verbose:
ifneq "$(MAKE_VERBOSE)" "true"
	@echo "Verbose output is DEACTIVATED."
else
	@echo "Verbose output is ACTIVATED."
endif



compile: $(SOURCES_LIST) $(SRCFILES)
	@echo ""
	@echo ">> [ COMPILE PROGRAM ] <<"

	$(if $(shell [ $(LINT) = "true" ] && echo 1),\
		@echo "$(PREFIX) Linter is ACTIVATED."\
	)
	@echo "$(PREFIX) Compiling all source files..."
	@$(CC) -d $(CLASSES_PATH) @$< $(FLAGS)
	@echo "$(PREFIX) Successfully compiled all source files."

	$(eval HAS_COMPILED := $(wildcard $(CLASSES_PATH)))
	$(eval HAS_OUTPUT := $(wildcard $(OUTPUT_PATH)))

	@echo ""
	@echo ">> [ GENERATE LIST ] <<"
	@echo "$(PREFIX) Generating list of class files..."

ifeq "$(MAKE_VERBOSE)" "true"
	@python $(PYTHON_PATH)generate_list.py cls -v
else
	@python $(PYTHON_PATH)generate_list.py cls
endif

	@echo "$(PREFIX) List file generated."


package: $(CLSFILES)
	$(if $(shell [ ! -d $(CLASSES_PATH) ] && echo "1"),\
		$(error $(PREFIX) Program is uncompiled, compile it with `make compile` command)\
	)

	@echo ""
	@echo ">> [ CREATE JAR ] <<"

	@echo "$(PREFIX) Copying all program resources to output directory..."
	@cp -r --preserve=all $(RESOURCES_PATH)* $(CLASSES_PATH)
	@echo "$(PREFIX) All resources have been copied."

	@echo ""
	@echo "$(PREFIX) Creating jar for compiled classes..."

ifeq "$(MAKE_VERBOSE)" "true"
	@python $(PYTHON_PATH)fix_config.py -v
	@jar cvfm $(jar) $(MANIFEST) \
	    LICENSE -C $(CLASSES_PATH) .
else
	@python $(PYTHON_PATH)fix_config.py
	@jar cfm $(jar) $(MANIFEST) \
		LICENSE -C $(CLASSES_PATH) .
endif

ifeq "$(INCLUDE-SRC)" "true"
	@echo ""
	@echo "$(PREFIX) INCLUDE-SRC option is ACTIVATED"
	@echo "$(PREFIX) Adding the source files into jar..."
ifeq "$(MAKE_VERBOSE)" "true"
	@jar uvf $(jar) -C $(SOURCES_PATH) .
else
	@jar uf $(jar) -C $(SOURCES_PATH) .
endif
endif

	@echo "$(PREFIX) Successfully created the jar file."
	@echo ""
	@echo "SAVED IN: \"$(jar)\""


build-docs: $(SOURCES_LIST)
	@echo
ifndef VERBOSE
	@echo "$(PREFIX) Verbose mode: QUIET"
	$(eval FLAGS := -quiet)
else
ifeq "$(VERBOSE)" "true"
	@echo "$(PREFIX) Verbose mode: NORMAL"
endif
ifeq "$(VERBOSE)" "all"
	@echo "$(PREFIX) Verbose mode: ALL"
	$(eval FLAGS := -verbose)
endif
ifneq "$(shell [ $(VERBOSE) = 'all' ] || [ $(VERBOSE) = 'true' ] && echo false)" "false"
	@echo "$(PREFIX) Verbose mode: NORMAL"
endif
endif

	@echo
	@echo ">> [ BUILD DOCS ] <<"
	@echo "$(PREFIX) Build the JMatrix docs..."
	@javadoc -author -version -d $(DOCS_PATH)jmatrix -Xdoclint \
		@$^ --release 11 -windowtitle "JMatrix" -doctitle "<b>JMatrix</b> v$(VERSION)" \
		-tag param -tag return -tag throws -tag warning:a:"Warning:" -tag author -tag license:a:"License:" -tag see \
		-Xdoclint/package:-com.mitsuki.jmatrix.core \
		-bottom "<font size="-1">Copyright (c) 2023 <a href="https://github.com/mitsuki31">Ryuu Mitsuki</a>.</font>" \
		-group "Core Packages" "com.mitsuki.jmatrix*:com.mitsuki.jmatrix.core" \
		-group "Utilities Packages" "com.mitsuki.jmatrix.util" $(FLAGS)

	@echo "$(PREFIX) Successfully build the JMatrix docs."
	@echo
	@echo "SAVED IN: \"$(DOCS_PATH)jmatrix/\""

clean:
	@echo ""
	@echo ">> [ CLEAN WORKING DIRECTORY ] <<"
	@echo "$(PREFIX) Cleaning the \"$(subst ./,,$(OUTPUT_PATH))\" directory recursively..."
	@-rm -r $(OUTPUT_PATH)
	@echo "$(PREFIX) Classes directory cleaned up."

# Clean the temporary directory "tmp/", only if exist
	$(if $(shell [ -d tmp/ ] && echo 1),\
		@echo && echo "$(PREFIX) Cleaning the \"tmp/\" directory recursively..." &&\
		rm -r tmp &&\
		echo "$(PREFIX) Temporary directory cleaned up."\
	)

# Clean the generated HTML pages directory "docs/jmatrix/", only if exist
	$(if $(shell [ -d $(DOCS_PATH)jmatrix ] && echo 1),\
		@echo && echo "$(PREFIX) Cleaning the \"$(DOCS_PATH)jmatrix/\" directory recursively..." &&\
		rm -r $(DOCS_PATH)jmatrix &&\
		echo "$(PREFIX) Generated HTML pages cleaned up."\
	)
	@echo ""
	@echo "$(PREFIX) All cleaned up."


cleanbin:
	@echo ""
	@echo ">> [ CLEAN ONLY THE CLASS OBJECTS ] <<"
	@echo "$(PREFIX) Cleaning the class files..."
	@-rm -r $(CLASSES_PATH)
	@echo ""
	@echo "$(PREFIX) All cleaned up."

	$(if $(shell test -e $(jar) && echo "1"),\
		@echo 'File "$(subst ./,,$(jar))" is still exists.',\
		@echo 'File "$(subst ./,,$(jar))" is missing or has been deleted.'\
	)

cleandocs:
	@echo
	@echo ">> [ CLEAN ONLY THE GENERATED DOCS ] <<"
	@echo "$(PREFIX) Cleaning the generated HTML pages..."
	@-rm -r $(DOCS_PATH)jmatrix
	@echo
	@echo "$(PREFIX) All cleaned up."

$(SOURCES_LIST): $(wildcard $(PYTHON_PATH)*.py)
	@echo ""
	@echo ">> [ GENERATE LIST ] <<"
	@echo "$(PREFIX) Generating list of source files..."

ifeq "$(MAKE_VERBOSE)" "true"
	@python $(PYTHON_PATH)generate_list.py src -v
else
	@python $(PYTHON_PATH)generate_list.py src
endif

	@echo "$(PREFIX) List file generated."


usage:
	@echo "[Makefile Usage]"

	@echo ""
	@echo "Parameters:"
	@echo "    $$ make [option1] [option2] [...]"

	@echo ""
	@echo "Generate \"jar\" file (simple)"
	@echo ""
	@echo "make"
	@echo "  └── compile"
	@echo "          └── package"
	@echo "                 └── cleanbin (optional)"

	@echo ""
	@echo "Generate \"jar\" file (complex)"
	@echo ""
	@echo "make"
	@echo "  └── compile"
	@echo "         └── package"
	@echo "                └── && mv target/*.jar ."
	@echo "                       └── && make"
	@echo "                                └── clean"
