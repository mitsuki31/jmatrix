# ======================= #
#         Makefile        #
# ======================= #
# >> Created by Ryuu Mitsuki

# WARNING! Don't change this version manually, it's autogenerated!
VERSION = 1.0.0-beta.x
PREFIX  = [jmatrix]

CC = javac

# Path variables
PYTHON_PATH    := ./src/main/python/
RESOURCES_PATH := ./src/main/resources/
SOURCES_LIST   := ./target/generated-list/sourceFiles.lst
CLASSES_LIST   := ./target/generated-list/outputFiles.lst
OUTPUT_PATH    := ./target/
CLASSES_PATH   := ./target/classes/
PACKAGE_PATH   := com/mitsuki/jmatrix/
MANIFEST       := META-INF/MANIFEST.MF

jar := $(OUTPUT_PATH)jmatrix-$(VERSION).jar

# Check whether the program has compiled
define check_compiled7
	ifeq ($(wildcard $(CLASSES_PATH)$(PACKAGE_PATH)),)
		compiled = false
	else
		compiled = true
	endif
endef

# Check VERBOSE variable from shell
ifndef VERBOSE
	MAKE_VERBOSE :=
else
ifeq ($(VERBOSE),true)
	MAKE_VERBOSE := true
else
	MAKE_VERBOSE :=
endif
endif


# This to avoid 'Make' options treated as file
.PHONY: all compile package clean test


all:
	@echo "$(PREFIX) Options:"
	@echo "   * compile       - Compile the program. \
		\n   * package       - Create archived package (jar) of compiled program.\
		\n                        WARNING: Program need to be compiled first! \
		\n   * clean         - Clean all of compiled program and created jar. \
		\n   * check-verbose - Check the verbose status."

	@echo "\n$(PREFIX) Usage:\n     make [option1] [option2] [...]"

	@echo "\nTips: Combine the options, and Makefile will understand it."


check-verbose:
ifeq ($(MAKE_VERBOSE),)
	@echo "Verbose output is DEACTIVATE."
else
	@echo "Verbose output is ACTIVATE."
endif



compile: $(SOURCES_LIST)
# Check the output path, if does not exist then create new
ifeq ($(wildcard $(CLASSES_PATH)),)
	@echo "$(PREFIX) Creating new \"$(CLASSES_PATH)\" directory..."
	mkdir -p $(CLASSES_PATH)
	@echo "$(PREFIX) Successfully create \"$(CLASSES_PATH)\" directory.\n"
else
	@echo "$(PREFIX) Output directory already exist.\n"
endif

	@echo "$(PREFIX) Compiling all the source files..."
	$(CC) -d $(CLASSES_PATH) @$<
	@echo "$(PREFIX) Successfully compile the all source files."

	$(call check_compiled)


package: $(CLASSES_LIST)
# Check all class files, if the directory is empty raise an error
ifeq ($(compiled),true)
	$(error $(PREFIX) Program has not been compiled, compile it with 'make compile' command)
else
	@echo "\n$(PREFIX) Compiled classes found."
endif

	@echo "$(PREFIX) Copying all program resources to output directory..."
	cp -r $(RESOURCES_PATH)* $(CLASSES_PATH)
	@echo "$(PREFIX) All resources have been copied.\n"

	@echo "$(PREFIX) Creating jar for compiled classes..."

ifeq ($(MAKE_VERBOSE),true)
	python $(PYTHON_PATH)fix_config.py -v
	jar cvfm $(jar) $(MANIFEST) \
	    LICENSE -C $(CLASSES_PATH) .
else
	python $(PYTHON_PATH)fix_config.py
	jar cfm $(jar) $(MANIFEST) \
		LICENSE -C $(CLASSES_PATH) .
endif

	@echo "\n$(PREFIX) Successfully create jar file."
	@echo "SAVED IN: \"$(jar)\""


clean:
# Check the output path
ifeq ($(wildcard ./target/),)
	@echo "$(PREFIX) Nothing to clean, all cleaned up."
else
	@echo "$(PREFIX) Cleaning the \"./target/\" directory recursively..."
	rm -rf ./target/
	@echo "\n$(PREFIX) All cleaned up."
endif


$(SOURCES_LIST): $(PYTHON_PATH)*.py
	@echo "$(PREFIX) Generating list of source files..."

ifeq ($(MAKE_VERBOSE),true)
	python $(PYTHON_PATH)generate_list.py src -v
else
	python $(PYTHON_PATH)generate_list.py src
endif

	@echo "$(PREFIX) List file generated.\n"

$(CLASSES_LIST): $(PYTHON_PATH)*.py
# Check the class path
ifeq ($(wildcard $(CLASSES_PATH)),)
	$(error $(PREFIX) Program has not been compiled, compile it with 'make compile' command)
endif

	@echo "$(PREFIX) Generating list of class files..."

ifeq ($(MAKE_VERBOSE),true)
	python $(PYTHON_PATH)generate_list.py cls -v
else
	python $(PYTHON_PATH)generate_list.py cls
endif

	@echo "$(PREFIX) List file generated.\n"
